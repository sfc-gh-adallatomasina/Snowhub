--  Purpose: create stage task
--
--  Revision History:
--  Date     Engineer      Description
--  -------- ------------- ----------------------------------
-- 16/12/22 	sayali phadtare 	task to load data 
--                               from snowflake.account_usage.query_history view to query_history_stg table
--22/12/2022   sayali phadtare   removed row_count
--------------------------------------------------------------------


CREATE OR REPLACE TASK &{l_target_db}.&{l_target_schema}.task_load_query_history_stg
--WAREHOUSE = &{l_target_wh}
--SCHEDULE = 'USING CRON 0 * * * * Europe/London'
USER_TASK_TIMEOUT_MS = 86400000
USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = 'XSMALL'
AFTER &{l_target_db}.&{l_target_schema}.TASK_INITIALIZE
AS
EXECUTE IMMEDIATE $$

   
BEGIN 

ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 86400;

TRUNCATE TABLE &{l_target_db}.&{l_sec_schema}.query_history_stg;      

INSERT INTO &{l_target_db}.&{l_sec_schema}.query_history_stg
(ORGANIZATION_NAME,ACCOUNT_NAME,REGION_NAME,QUERY_ID,QUERY_TEXT,DATABASE_ID,DATABASE_NAME,SCHEMA_ID,SCHEMA_NAME,QUERY_TYPE,SESSION_ID,USER_NAME,
ROLE_NAME,WAREHOUSE_ID,WAREHOUSE_NAME,WAREHOUSE_SIZE,WAREHOUSE_TYPE,CLUSTER_NUMBER,QUERY_TAG,EXECUTION_STATUS,ERROR_CODE,ERROR_MESSAGE,START_TIME,END_TIME,
TOTAL_ELAPSED_TIME,BYTES_SCANNED,PERCENTAGE_SCANNED_FROM_CACHE,BYTES_WRITTEN,BYTES_WRITTEN_TO_RESULT,BYTES_READ_FROM_RESULT,ROWS_PRODUCED,ROWS_INSERTED,ROWS_UPDATED,ROWS_DELETED,
ROWS_UNLOADED,BYTES_DELETED,PARTITIONS_SCANNED,PARTITIONS_TOTAL,BYTES_SPILLED_TO_LOCAL_STORAGE,BYTES_SPILLED_TO_REMOTE_STORAGE,BYTES_SENT_OVER_THE_NETWORK,COMPILATION_TIME,
EXECUTION_TIME,QUEUED_PROVISIONING_TIME,QUEUED_REPAIR_TIME,QUEUED_OVERLOAD_TIME,TRANSACTION_BLOCKED_TIME,OUTBOUND_DATA_TRANSFER_CLOUD,OUTBOUND_DATA_TRANSFER_REGION,OUTBOUND_DATA_TRANSFER_BYTES,
INBOUND_DATA_TRANSFER_CLOUD,INBOUND_DATA_TRANSFER_REGION,INBOUND_DATA_TRANSFER_BYTES,LIST_EXTERNAL_FILES_TIME,CREDITS_USED_CLOUD_SERVICES,RELEASE_VERSION,EXTERNAL_FUNCTION_TOTAL_INVOCATIONS,
EXTERNAL_FUNCTION_TOTAL_SENT_ROWS,EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS,EXTERNAL_FUNCTION_TOTAL_SENT_BYTES,EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES,QUERY_LOAD_PERCENT,
IS_CLIENT_GENERATED_STATEMENT,QUERY_ACCELERATION_BYTES_SCANNED,QUERY_ACCELERATION_PARTITIONS_SCANNED,QUERY_ACCELERATION_UPPER_LIMIT_SCALE_FACTOR,DW_FILE_NAME,DW_LOAD_TS) 
select
'&{l_hub_org_name}'                 as ORGANIZATION_NAME
,'&{l_ACCOUNT_NAME}'                as ACCOUNT_NAME
,current_region()                   as REGION_NAME,
s.QUERY_ID,
s.QUERY_TEXT,
s.DATABASE_ID,
s.DATABASE_NAME,
s.SCHEMA_ID,
s.SCHEMA_NAME,
s.QUERY_TYPE,
s.SESSION_ID,
s.USER_NAME,
s.ROLE_NAME,
s.WAREHOUSE_ID,
s.WAREHOUSE_NAME,
s.WAREHOUSE_SIZE,
s.WAREHOUSE_TYPE,
s.CLUSTER_NUMBER,
s.QUERY_TAG,
s.EXECUTION_STATUS,
s.ERROR_CODE,
s.ERROR_MESSAGE,
s.START_TIME,
s.END_TIME,
s.TOTAL_ELAPSED_TIME,
s.BYTES_SCANNED,
s.PERCENTAGE_SCANNED_FROM_CACHE,
s.BYTES_WRITTEN,
s.BYTES_WRITTEN_TO_RESULT,
s.BYTES_READ_FROM_RESULT,
s.ROWS_PRODUCED,
s.ROWS_INSERTED,
s.ROWS_UPDATED,
s.ROWS_DELETED,
s.ROWS_UNLOADED,
s.BYTES_DELETED,
s.PARTITIONS_SCANNED,
s.PARTITIONS_TOTAL,
s.BYTES_SPILLED_TO_LOCAL_STORAGE,
s.BYTES_SPILLED_TO_REMOTE_STORAGE,
s.BYTES_SENT_OVER_THE_NETWORK,
s.COMPILATION_TIME,
s.EXECUTION_TIME,
s.QUEUED_PROVISIONING_TIME,
s.QUEUED_REPAIR_TIME,
s.QUEUED_OVERLOAD_TIME,
s.TRANSACTION_BLOCKED_TIME,
s.OUTBOUND_DATA_TRANSFER_CLOUD,
s.OUTBOUND_DATA_TRANSFER_REGION,
s.OUTBOUND_DATA_TRANSFER_BYTES,
s.INBOUND_DATA_TRANSFER_CLOUD,
s.INBOUND_DATA_TRANSFER_REGION,
s.INBOUND_DATA_TRANSFER_BYTES,
s.LIST_EXTERNAL_FILES_TIME,
s.CREDITS_USED_CLOUD_SERVICES,
s.RELEASE_VERSION,
s.EXTERNAL_FUNCTION_TOTAL_INVOCATIONS,
s.EXTERNAL_FUNCTION_TOTAL_SENT_ROWS,
s.EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS,
s.EXTERNAL_FUNCTION_TOTAL_SENT_BYTES,
s.EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES,
s.QUERY_LOAD_PERCENT,
s.IS_CLIENT_GENERATED_STATEMENT,
s.QUERY_ACCELERATION_BYTES_SCANNED,
s.QUERY_ACCELERATION_PARTITIONS_SCANNED,
s.QUERY_ACCELERATION_UPPER_LIMIT_SCALE_FACTOR
,'QUERY_HISTORY'
,current_timestamp()
from snowflake.account_usage.query_history s
where NVL(s.END_TIME, s.START_TIME) >=
to_timestamp(select ifnull( dateadd( hour, -4, max( NVL(END_TIME,START_TIME) ) ), '2020-01-01' ) as last_control_dt from &{l_target_db}.&{l_sec_schema}.query_history_history)
;
END;
$$;
